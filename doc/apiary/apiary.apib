FORMAT: 1A
HOST: http://cygnus.lab.fiware.org/

# FIWARE-Cygnus API (v1)

FIWARE-CYGNUS API (v1).

This is a cookbook with commands that show how to use FIWARE cygnus API.
It's a work in progress and is changing on a daily basis.

Please check the following [FIWARE Open Specification Legal Notice (implicit patents license)]
(http://forge.fiware.org/plugins/mediawiki/wiki/fiware/index.php/FI-WARE_Open_Specification_Legal_Notice_(implicit_patents_license))
to understand the rights to use this document.


# Description

This resource allows you to obtain a list of subresources published by the API:

* version of the current running cygnus on your system
* statistics about the configured Flume components
* useful information about configured grouping rules like:
  * current grouping rules configured
  * add, update or delete current grouping rules

## Error responses

Error list (HTTP response code in parenthesis):

* BadFields             (`400`). The incoming JSON payload cannot be parsed.
* WrongFields           (`400`). The incoming request has invalid fields.
* WrongSubscription     (`400`). Orion cant do the subscription.
* BadRequest            (`400`). The request is invalid.
* InternalServerError   (`500`). Internal error in the server.

## Group Version API

## Gets the version of the running Cygnus [GET /v1/version]

+ Request

       GET http://<cygnus_host>:<management_port>/v1/version

+ Response 200 (application/json)

       [
            {
              "success": "true",
              "version": "0.13.0_SNAPSHOT.52399574ea8503aa8038ad14850380d77529b550"
            }
       ]

## Group Statistics API

## Get stats of Flume components [GET /v1/stats]

+ Request

       GET http://<cygnus_host>:<management_port>/v1/stats

+ Response 200 (application/json)

       [
          {
              "stats": {
              "channels": [
                    {
                        "name": "mysql-channel",
                        "num_events": 0,
                        "num_puts_failed": 0,
                        "num_puts_ok": 11858,
                        "num_takes_failed": 1,
                        "num_takes_ok": 11858,
                        "setup_time": "2016-02-05T10:34:25.80Z",
                        "status": "START"
                    }
                  ],
              "sinks": [
                    {
                        "name": "mysql-sink",
                        "num_persisted_events": 11800,
                        "num_processed_events": 11858,
                        "setup_time": "2016-02-05T10:34:24.978Z",
                        "status": "START"
                    }
                  ],
              "sources": [
                    {
                        "name": "http-source",
                        "num_processed_events": 11858,
                        "num_received_events": 11858,
                        "setup_time": "2016-02-05T10:34:24.921Z",
                        "status": "START"
                    }
                  ]
              },
              "success": "true"
          }
        ]

## Resets the statistics about the configured Flume components [PUT /v1/stats]

+ Request

       PUT http://<cygnus_host>:<management_port>/v1/stats

+ Response 200 (application/json)

        {
            "success":"true"
        }

## Group Grouping Rules API

### Get current grouping rules [GET /v1/groupingrules]

+ Request

       GET http://<cygnus_host>:<management_port>/v1/groupingrules

+ Response 200 (application/json)

        [
            {
                "grouping_rules": [
                        {
                            "destination": "allcars",
                            "fields": [
                                  "entityType"
                                  ],
                            "fiware_service_path": "cars",
                            "id": 1,
                            "regex": "Car"
                        },
                        {
                             "destination": "allrooms",
                             "fields": [
                                  "entityType"
                                  ],
                            "fiware_service_path": "rooms",
                            "id": 2,
                            "regex": "Room"
                        }
                    ],
                "success": "true"
            }
        ]

### Adds a new rule [POST /v1/groupingrules]

+ Parameters

       + id: 1 (number) - An unique identifier of the message.

+ Request

       POST http://<cygnus_host>:<management_port>/v1/groupingrules
       {
           "regex": "Room",
           "destination": "allrooms",
           "fiware_service_path": "rooms",
           "fields": ["entityType"]
       }

+ Response 200 (application/json)

       {
           "success":"true"
       }

### Update an already existent grouping rules [PUT /v1/groupingrules]

+ Parameters

       + id: 1 (number) - An unique identifier of the message.

+ Request

       PUT http://<cygnus_host>:<management_port>/v1/groupingrules=id=1
       {
           "regex": "Room",
           "destination": "otherrooms",
           "fiware_service_path": "rooms",
           "fields": ["entityType"]
      }

+ Response 200 (application/json)

        [
            {"success":"true"}
        ]


### Delete a grouping rules [DELETE /v1/groupingrules]

+ Parameters

       + id: 1 (number) - An unique identifier of the message.

+ Request

       DELETE http://<cygnus_host>:<management_port>/v1/groupingrules?id=2

+ Response 200 (application/json)

       [
           {"success":"true"}
       ]


## Group Subscriptions API

### Creates a new subscription to Orion v1 [POST /v1/subscriptions]

+ Parameters

       + ngsi_version: 1 (Defines the Orion API's version)

+ Request

       POST "http://<cygnus_host>:<management_port>/v1/subscriptions?ngsi_version=1"
       {
           "subscription":{
           "entities": [
                   {
                       "type": "Room",
                       "isPattern": "false",
                       "id": "Room1"
                   }
               ],
           "attributes": [],
           "reference": "http://<reference_host>:<reference_port>",
           "duration": "P1M",
           "notifyConditions": [
                   {
                       "type": "ONCHANGE",
                      "condValues": []
                   }
               ],
           "throttling": "PT5S"
           },
           "endpoint":{
                   "host":"<endpoint_host>",
                   "port":"<endpoint_port>",
                   "ssl":"false",
                   "xauthtoken":"234123123123123"
           }
       }

+ Response 200 (application/json)

        {
            "success":"true",
            "result" : {
                    {
                      "subscribeResponse":{
                                  "duration":"P1M",
                                  "throttling":"PT5S",
                                  "subscriptionId":"56f9081c3c6fb7e9d2a912a0"
                        }
                    }
              }
        }

+ Response 400 (application/json)

        {
            "success":"true",
            "result" : {
                    "subscribeError": {
                                "errorCode": {
                                        "code":"400",
                                        "reasonPhrase":"Bad Request",
                                        "details":"JSON Parse Error: unknown field: \/extraField"
                                }
                    }
            }
        }

+ Response 400 (application/json)

        {
            "success":"false",
            "error":"Invalid subscription, field 'duration' is empty"
        }

+ Response 400 (application/json)

        {
            "success":"false",
            "error":"Invalid subscription, field 'notifyConditions' is missing"
        }

### Creates a new subscription to Orion v2 [POST /v1/subscriptions]

+ Parameters

       + ngsi_version: 2 (Defines the Orion API's version)

+ Request

       POST "http://<cygnus_host>:<management_port>/v1/subscriptions?ngsi_version=<ngsi_version>"
       {
               "subscription":{
                       "description": "One subscription to rule them all",
                       "subject": {
                               "entities": [
                                       {
                                               "idPattern": ".*",
                                               "type": "Room"
                                       }
                               ],
                               "condition": {
                                       "attrs": [
                                              "temperature"
                                       ],
                                       "expression": {
                                               "q": "temperature>40"
                                       }
                               }
                       },
                       "notification": {
                              "http": {
                                      "url": "http://localhost:1234"
                               },
                               "attrs": [
                                       "temperature",
                                       "humidity"
                               ]
                       },
                       "expires": "2016-05-05T14:00:00.00Z","throttling": 5
               },
               "endpoint":{
                       "host":"orion.lab.fiware.org",
                       "port":"1026",
                       "ssl":"false",
                       "xauthtoken":"QsENv67AJj7blC2qJ0YvfSc5hMWYrs"
               }
       }

+ Response 201 (application/json)

       {
               "success":"true",
               "result" : {
                       "SubscriptionID" : "572ae23d20e1387832ed98d0"
               }
       }

+ Response 400 (application/json)

       {
               "success":"false",
               "error":"Invalid subscription, field 'xxxxxx' is missing"
       }

+ Response 400 (application/json)

       {
               "success":"false",
               "error":"Invalid subscription, field 'xxxxxx' has missing fields"
       }

+ Response 400 (application/json)

       {
               "success":"false",
               "error":"Missing endpoint"
       }

### Gets a current subscription [GET /v1/subscriptions]

+ Parameters

       + ngsi_version: 2 (Defines the Orion API's version)
       + subscription_id: <subscriptionId> (Subscription's identificator)

+ Request

       GET http://<cygnus_host>:<management_port>/v1/subscriptions?ngsi_version=<ngsiVersion>&subscription_id=<subscriptionId>
       {
               "host":"orion.lab.fi-ware.org",
               "port":"1026",
               "ssl":"false",
               "xauthtoken":"QsENv67AJj7blC2rt54ESc5hMWYrs"
       }

+ Response 200 (application/json)

       {
               "success":"true",
               "result" : {
                       {
                               "notification":{
                                       "lastNotification":"2015-07-28T22:24:33.00Z",
                                       "timesSent":8122767998226748692,
                                       "callback":"http:\/\/xxx.xxx.xx.xxx:xxxx\/ngsi10\/notifyContext",
                                       "attributes":[
                                       ]
                               },
                               "expires":"2016-09-25T08:17:47.00Z",
                               "subject":{
                                       "condition":{
                                               "expression":{
                                                       "q":"",
                                                       "geometry":"",
                                                       "coords":"",
                                                       "georel":""
                                               },
                                               "attributes":[
                                                       "TimeInstant"
                                               ]
                                       },
                                       "entities":[
                                               {
                                                       "id":"",
                                                       "type":"sevilla:fountain",
                                                       "idPattern":"patternId"
                                               }
                                       ]
                               },
                               "id":"54325022q469a3873d30oe95",
                               "status":"active"
                       }
               }
       }

+ Response 400 (application/json)

       {
               "success":"false",
               "result" : {
                       {
                               "description":"",
                               "error":"subscriptionId does not correspond to an active subscription"
                       }
               }
       }

+ Response 400 (application/json)

       {
               "success":"false",
               "error":"Parse error, invalid parameter (ngsi_version): Must be 1 or 2. Check it for errors."
       }

+ Response 400 (application/json)

       {
               "success":"false",
               "error":"GET /v1/subscriptions not implemented."
       }

### Gets all current subscriptions [GET /v1/subscriptions]

+ Parameters

       + ngsi_version: 2 (defines the Orion API's version)

+ Request

       GET http://<cygnus_host>:<management_port>/v1/subscriptions?ngsi_version=<ngsiVersion>
       {
               "host":"orion.lab.fi-ware.org",
               "port":"1026",
               "ssl":"false",
               "xauthtoken":"QsENv67AJj7blC2rt54ESc5hMWYrs"
       }

+ Response 200 (application/json)

       {
              {
                   "success":"true",
                   "result" : {
                        {
                             "result":[
                                   {
                                       "notification":{
                                            "lastNotification":"2015-07-28T22:23:30.00Z",
                                            "timesSent":7126568376946155044,
                                            "http":{
                                                 "url":"http:\/\/192.168.32.120:1026\/ngsi23\/notifyContext"
                                            },
                                            "attrs":[]
                                       },
                                       "expires":"2016-09-13T09:27:15.00Z",
                                       "subject":{
                                           "condition":{
                                                "attrs":[
                                                   "chlorine"
                                                ]
                                            },
                                            "entities":[
                                                {
                                                     "id":"",
                                                     "type":"sevilla:fountain",
                                                     "idPattern":"Sevilla:FUENTES:"
                                                }
                                            ]
                                        },
                                        "id":"54228e731860a3873d395d66",
                                        "status":"active"
                                    }
                              ]
                        }
                  }
              }
       }


+ Response 400 (application/json)

       {
            "success":"false",
            "error":"Parse error, invalid parameter (ngsi_version): Must be 1 or 2. Check it for errors."
       }

+ Response 400 (application/json)

       {
            "success":"false",
            "error":"GET /v1/subscriptions not implemented for NGSI version 1."
       }

+ Response 400 (application/json)

       {
            "success":"false",
            "error":"Invalid endpoint, field 'ssl' is missing"
       }

### Deletes a current subscription to Orion [DELETE /v1/subscriptions]

+ Parameters

       + ngsi_version: 1 or 2 (Defines the Orion API's version)
       + subscription_id: <subscriptionId> (Subscription's identificator)

+ Request

       DELETE "http://<cygnus_host>:<management_port>/v1/subscriptions?subscription_id=<subscriptionId>&ngsi_version=<ngsiVersion>"

+ Response 204 (application/json)

       {
               "success":"true",
               "result" : {
                       " Subscription deleted "
               }
       }

+ Response 400 (application/json) [Bad parameters]

       {
               "success":"false",
               "error":"Parse error, wrong parameter (subscription_id). Check it for errors."
       }

+ Response 400 (application/json) [Wrong subscription id in v1]

       {
               "success":"false",
               "result" : {
                       {
                             "subscriptionId":"571872a9c0585c7451571be4",
                             "statusCode":{
                                   "code":"404",
                                   "reasonPhrase":"No context element found",
                                   "details":"subscriptionId: \/571872a9c0585c7451571be4\/"
                             }
                       }
               }
       }

+ Response 400 (application/json) [Wrong subscription id in v2]

       {
               "success":"false",
               "result" : {
                       {
                             "description":"The requested subscription has not been found. Check id","error":"NotFound"
                       }
               }
       }

+ Response 400 (application/json) [Empty authentication token]

       {
               "success":"false",
               "error":"Empty Auth-Token. Required for API methods"
       }

+ Response 400 (application/json) [Missing authentication token]

       {
               "success":"false",
               "error":"Missing Auth-Token. Required for API methods"
       }


## Group Admin API

### Gets the log4j configuration [GET /admin/log]

+ Request

       GET http://<cygnus_host>:<management_port>/admin/log

+ Response 200 (application/json)

       {
               "level": "..."
       }

+ Response 500 (application/json)

       {
               "error": "..."
       }

### Update the logging level of Cygnus [PUT /admin/log]

+ Parameters

        + loglevel: Must be DEBUG, INFO, WARN, ERROR o FATAL (String) - A valid log level.

+ Request

       PUT http://<cygnus_host>:<management_port>/admin/log?level=<log_level>

+ Response 200 (text/plain)

       OK

+ Response 400 (application/json)

       {
           "error":"Invalid log level"
       }

+ Response 400 (application/json)

       {
           "error":""
       }
